import os
import random
import time
import cv2
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from tqdm import tqdm
from skimage.feature import hog
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# --- H√†m load v√† tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng t·ª´ ·∫£nh ---
def load_images_from_folder(folder, label):
    images = []
    labels = []
    original_images = []  # L∆∞u ·∫£nh g·ªëc ƒë·ªÉ hi·ªÉn th·ªã sau n√†y
    for filename in tqdm(os.listdir(folder), desc=f"Loading {folder}"):
        img_path = os.path.join(folder, filename)
        img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)  # ƒê·ªçc ·∫£nh x√°m ngay t·ª´ ƒë·∫ßu
        if img is not None:
            img = cv2.resize(img, (64, 64))
            original_images.append(img)  # L∆∞u ·∫£nh g·ªëc
            img = cv2.GaussianBlur(img, (3, 3), 0)  # Gi·∫£m nhi·ªÖu b·∫±ng Gaussian Blur
            features = hog(img, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False)
            images.append(features)
            labels.append(label)
    return images, labels, original_images

# --- Load d·ªØ li·ªáu train ---
plastic_images, plastic_labels, plastic_originals = load_images_from_folder(
    r"D:\tai_lieu_dai_hoc\THI_GIAC_MAY_TINH\Waste_Classification\dataset\train1\plastic", 0)
metal_images, metal_labels, metal_originals = load_images_from_folder(
    r"D:\tai_lieu_dai_hoc\THI_GIAC_MAY_TINH\Waste_Classification\dataset\train1\metal", 1)

# --- G·ªôp d·ªØ li·ªáu ---
X = np.array(plastic_images + metal_images)
y = np.array(plastic_labels + metal_labels)
original_images = plastic_originals + metal_originals  # G·ªôp danh s√°ch ·∫£nh g·ªëc

# --- Hi·ªÉn th·ªã t·ªïng s·ªë m·∫´u ·∫£nh ---
print(f"\nüì∏ T·ªïng s·ªë m·∫´u ·∫£nh: {len(X)}")

# --- Bi·ªÉu ƒë·ªì ph√¢n b·ªë l·ªõp ---
plt.figure(figsize=(8, 5))
sns.countplot(x=y)
plt.title('Ph√¢n b·ªë c√°c l·ªõp trong t·∫≠p d·ªØ li·ªáu')
plt.xlabel('L·ªõp')
plt.ylabel('S·ªë l∆∞·ª£ng m·∫´u')
plt.xticks(ticks=[0, 1], labels=["Plastic (0)", "Metal (1)"])
plt.savefig('class_distribution.png')
plt.show()

# --- Chia d·ªØ li·ªáu train/test ---
X_train, X_test, y_train, y_test, img_train, img_test = train_test_split(X, y, original_images, test_size=0.2, random_state=42)
print(f"üîπ S·ªë m·∫´u train: {len(X_train)}")
print(f"üîπ S·ªë m·∫´u test: {len(X_test)}")

# --- Chu·∫©n h√≥a d·ªØ li·ªáu ---
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# --- So s√°nh ƒë·ªô ch√≠nh x√°c v·ªõi c√°c gi√° tr·ªã gamma kh√°c nhau ---
gammas = [15e-5, 25e-5, 75e-5, 125e-5, 135e-5]
accuracies = []

for gamma in gammas:
    print(f"\n ƒêang hu·∫•n luy·ªán v·ªõi gamma = {gamma}...")
    svm_model = SVC(kernel='rbf', C=100, gamma=gamma)
    svm_model.fit(X_train, y_train)
    
    # ƒê√°nh gi√° tr√™n t·∫≠p test
    y_pred = svm_model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    accuracies.append(accuracy)

# --- V·∫Ω bi·ªÉu ƒë·ªì c·ªôt so s√°nh ƒë·ªô ch√≠nh x√°c ---
plt.figure(figsize=(8, 6))
plt.bar([str(g) for g in gammas], accuracies, color='skyblue')
plt.title('So s√°nh ƒë·ªô ch√≠nh x√°c tr√™n t·∫≠p ki·ªÉm tra v·ªõi c√°c gi√° tr·ªã gamma kh√°c nhau')
plt.xlabel('Gamma')
plt.ylabel('ƒê·ªô ch√≠nh x√°c (%)')
plt.ylim(0.90, 1)  # ƒê·∫∑t gi·ªõi h·∫°n tr·ª•c tung t·ª´ 0 ƒë·∫øn 1 (t∆∞∆°ng ·ª©ng v·ªõi 0% ƒë·∫øn 100%)
plt.tight_layout()
plt.savefig('gamma_comparison.png')
plt.show()

# In k·∫øt qu·∫£ ƒë·ªô ch√≠nh x√°c cho t·ª´ng gi√° tr·ªã gamma
for gamma, accuracy in zip(gammas, accuracies):
    print(f"Gamma: {gamma}, ƒê·ªô ch√≠nh x√°c: {accuracy * 100:.2f}%")

# --- Hu·∫•n luy·ªán m√¥ h√¨nh v·ªõi gamma t·ªët nh·∫•t ---
best_gamma = gammas[np.argmax(accuracies)]
print(f"\n Gamma t·ªët nh·∫•t l√†: {best_gamma} v·ªõi ƒë·ªô ch√≠nh x√°c {max(accuracies) * 100:.2f}%")

# --- Hu·∫•n luy·ªán l·∫°i m√¥ h√¨nh v·ªõi gamma t·ªët nh·∫•t v√† ƒë√°nh gi√° ---
svm_model = SVC(kernel='rbf', C=100, gamma=best_gamma)
svm_model.fit(X_train, y_train)
y_pred = svm_model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f"\n ƒê·ªô ch√≠nh x√°c tr√™n t·∫≠p test v·ªõi gamma t·ªët nh·∫•t ({best_gamma}): {accuracy * 100:.2f}%")
print("\n B√°o c√°o ph√¢n lo·∫°i:")
print(classification_report(y_test, y_pred))

# --- Confusion Matrix ---
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=["Plastic (0)", "Metal (1)"], yticklabels=["Plastic (0)", "Metal (1)"])
plt.title('Confusion Matrix')
plt.xlabel('D·ª± ƒëo√°n')
plt.ylabel('Th·ª±c t·∫ø')
plt.savefig('confusion_matrix.png')
plt.show()

# --- Hi·ªÉn th·ªã 12 ·∫£nh test ---
def display_predictions(img_test, y_test, y_pred, num_images=12):
    labels = {0: "Plastic", 1: "Metal"}
    plt.figure(figsize=(12, 8))
    for i in range(min(num_images, len(img_test))):
        plt.subplot(3, 4, i + 1)
        plt.imshow(img_test[i], cmap='gray')  # Hi·ªÉn th·ªã ·∫£nh g·ªëc
        color = 'green' if y_test[i] == y_pred[i] else 'red'
        plt.title(f'Th·ª±c: {labels[y_test[i]]}\nD·ª± ƒëo√°n: {labels[y_pred[i]]}', color=color)
        plt.axis('off')
    plt.suptitle('12 ·∫¢nh Test (Xanh: ƒê√∫ng, ƒê·ªè: Sai)')
    plt.tight_layout()
    plt.savefig('sample_predictions.png')
    plt.show()

display_predictions(img_test, y_test, y_pred)

# --- Hi·ªÉn th·ªã t·∫•t c·∫£ ·∫£nh b·ªã nh·∫≠n di·ªán sai ---
def display_misclassified_images(img_test, y_test, y_pred):
    labels = {0: "Plastic", 1: "Metal"}
    misclassified_indices = [i for i in range(len(y_test)) if y_test[i] != y_pred[i]]
    if not misclassified_indices:
        print("Kh√¥ng c√≥ ·∫£nh n√†o b·ªã nh·∫≠n di·ªán sai.")
        return
    
    num_images = len(misclassified_indices)
    rows = (num_images // 4) + (num_images % 4 > 0)  # S·ªë h√†ng c·∫ßn ƒë·ªÉ hi·ªÉn th·ªã h·∫øt ·∫£nh
    
    plt.figure(figsize=(12, rows * 3))  # ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc theo s·ªë h√†ng
    for i, idx in enumerate(misclassified_indices):
        plt.subplot(rows, 4, i + 1)
        plt.imshow(img_test[idx], cmap='gray')  # Hi·ªÉn th·ªã ·∫£nh b·ªã nh·∫≠n di·ªán sai
        plt.title(f'Th·ª±c: {labels[y_test[idx]]}\nD·ª± ƒëo√°n: {labels[y_pred[idx]]}', color='red')
        plt.axis('off')
    
    plt.suptitle(f'T·ªïng s·ªë ·∫£nh b·ªã nh·∫≠n di·ªán sai: {num_images}')
    plt.tight_layout()
    plt.savefig('all_misclassified_images.png')
    plt.show()

display_misclassified_images(img_test, y_test, y_pred)

# --- K·∫øt th√∫c ch∆∞∆°ng tr√¨nh ---
